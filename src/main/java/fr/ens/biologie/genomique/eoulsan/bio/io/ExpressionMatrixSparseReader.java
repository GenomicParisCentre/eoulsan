package fr.ens.biologie.genomique.eoulsan.bio.io;

import static fr.ens.biologie.genomique.eoulsan.bio.io.BioCharsets.GFF_CHARSET;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Objects;

import org.python.google.common.base.Splitter;

import fr.ens.biologie.genomique.eoulsan.bio.DenseExpressionMatrix;
import fr.ens.biologie.genomique.eoulsan.bio.ExpressionMatrix;
import fr.ens.biologie.genomique.eoulsan.util.FileUtils;

/**
 * This class define an ExpressionMatrix reader for sparse matrix generated by
 * UMI-tools.
 * @author Laurent Jourdren
 * @since 2.0
 */
public class ExpressionMatrixSparseReader implements ExpressionMatrixReader {

  private final BufferedReader reader;

  @Override
  public ExpressionMatrix read() throws IOException {

    // TODO Create a Factory for ExpressionMatrix with newMatrix() for the
    // default one
    return read(new DenseExpressionMatrix());
  }

  @Override
  public ExpressionMatrix read(ExpressionMatrix matrix) throws IOException {

    Objects.requireNonNull(matrix, "matrix argument cannot be null");

    String line;
    boolean first = true;
    Splitter splitter = Splitter.on('\t');
    int lineCount = 0;

    while ((line = reader.readLine()) != null) {

      line = line.trim();
      lineCount++;

      if (line.isEmpty() || line.startsWith("#")) {
        continue;
      }

      if (first) {

        if (!"gene\tcell\tcount".equals(line.trim().toLowerCase())) {
          throw new IOException("Invalid header: " + line);
        }
        first = false;
        continue;
      }

      List<String> fields = splitter.splitToList(line);

      if (fields.size() != 3) {
        throw new IOException("Invalid field count ("
            + fields.size() + ") at line " + lineCount + ", expected 3 fields: "
            + line);
      }

      try {
        matrix.setValue(fields.get(0), fields.get(1),
            Integer.parseInt(fields.get(2)));
      } catch (NumberFormatException e) {
        throw new IOException(
            "Invalid count at line " + lineCount + ": " + line);
      }
    }

    return matrix;
  }

  //
  // Constructors
  //

  /**
   * Public constructor
   * @param is InputStream to use
   */
  public ExpressionMatrixSparseReader(final InputStream is) {

    if (is == null) {
      throw new NullPointerException("InputStream is null");
    }

    this.reader = new BufferedReader(new InputStreamReader(is, GFF_CHARSET));
  }

  /**
   * Public constructor
   * @param file File to use
   */
  public ExpressionMatrixSparseReader(final File file)
      throws FileNotFoundException {

    if (file == null) {
      throw new NullPointerException("File is null");
    }

    this.reader = FileUtils.createBufferedReader(file, GFF_CHARSET);
  }

  /**
   * Public constructor.
   * @param filename File to use
   */
  public ExpressionMatrixSparseReader(final String filename)
      throws FileNotFoundException {

    this.reader = FileUtils.createBufferedReader(filename, GFF_CHARSET);
  }

}
