/*
 *                      Nividic development code
 *
 * This code may be freely distributed and modified under the
 * terms of the GNU Lesser General Public Licence.  This should
 * be distributed with the code.  If you do not have a copy,
 * see:
 *
 *      http://www.gnu.org/copyleft/lesser.html
 *
 * Copyright for this code is held jointly by the microarray platform
 * of the École Normale Supérieure and the individual authors.
 * These should be listed in @author doc comments.
 *
 * For more information on the Nividic project and its aims,
 * or to join the Nividic mailing list, visit the home page
 * at:
 *
 *      http://www.transcriptome.ens.fr/nividic
 *
 */

package fr.ens.transcriptome.eoulsan.datatypes;

import fr.ens.transcriptome.eoulsan.design.Sample;

/**
 * This class define a datatype. It is used to check inputs and outputs of
 * steps.
 * @author jourdren
 */
public abstract class DataType {

  /**
   * Get the name of the data type.
   * @return the name of the DataType
   */
  public abstract String getName();

  /**
   * The description of the datatype.
   * @return the the description of the DataType
   */
  public String getDescription() {

    return getName();
  }

  /**
   * Get the default extension of the DataType.
   * @return the default extension
   */
  public abstract String getDefaultExtention();

  /**
   * Get the extensions for the DataType
   * @return an array of strings with the extension of the DataType
   */
  public String[] getExtensions() {

    return new String[] {getDefaultExtention()};
  }

  /**
   * Get the prefix for the files of this DataType generated by Eoulsan.
   * @return the prefix for the files
   */
  public abstract String getPrefix();

  /**
   * Get the source path for a DataType from a sample object.
   * @param sample sample to use to create the source
   * @param ExecInfo information object
   * @return the source for the DataType as a String
   */
  public String getSourcePathForSample(final Sample sample,
      final String ExecInfo) {

    return null;
  }

  /**
   * Test if there is only one file for this DataType per analysis.
   * @return true if there is only one file for this DataType per analysis
   */
  public boolean isOneFilePerAnalysis() {

    return false;
  }

  @Override
  public String toString() {
    return getName();
  }

}
